//This file contains all the errors and solution which encountered during this project

│ #Error1: Invalid for_each argument
│
│   on vpc.tf line 62, in resource "aws_route_table_association" "public":
│   62:   for_each       = aws_subnet.public
│     ├────────────────
│     │ aws_subnet.public is tuple with 2 elements
│
│ The given "for_each" argument value is unsuitable: the "for_each" argument must be a map, or set of strings,   
│ and you have provided a value of type tuple.

#sol: Understanding the Problem:

for_each Meta-Argument: The for_each meta-argument in Terraform expects a map or a set of strings.
Tuple: When you use count in a resource definition, Terraform creates a tuple (a list-like structure) of resource instances.
The Error: The error message clearly states that aws_subnet.public is a tuple with 2 elements, and for_each cannot accept a tuple.
How to Fix It:

Use for_each with a Map or Set:

If you're using count to create your subnets, you can still use for_each in your route table association by creating a map or set that corresponds to your subnets.
If you have a map or set of names for your subnets, you can use that.
If you do not have a map or set, you can make one using the range function, and the length function.
Terraform

resource "aws_route_table_association" "public" {
  for_each       = {for index, subnet in aws_subnet.public : index => subnet}
  subnet_id      = each.value.id
  route_table_id = aws_route_table.public.id
}
This will convert the tuple into a map, where the key is the index of the subnet, and the value is the subnet itself.
Using the count.index

If you are associating the route table associations with the subnets in the same order that they are created, you can use the count.index meta-argument.
Terraform

resource "aws_route_table_association" "public" {
  count          = length(aws_subnet.public)
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public.id
}


  #Error2: Invalid for_each argument
│
│   on alb.tf line 7, in resource "aws_lb" "primary_alb":
│    7:   for_each           = aws_subnet.public
│     ├────────────────
│     │ aws_subnet.public is tuple with 2 elements
│
│ The given "for_each" argument value is unsuitable: the "for_each" argument must be a map, or set of strings,   
│ and you have provided a value of type tuple.


##sol: Understanding the Problem:

aws_subnet.public Tuple: Your aws_subnet.public resource is being created using the count meta-argument, which results in a tuple (a list-like structure) of subnet resources.
for_each Requirement: The for_each meta-argument requires either a map or a set of strings.
Incompatibility: You're directly assigning the tuple aws_subnet.public to for_each, which is incompatible.
Solutions:

Convert Tuple to Map (Recommended if you need to iterate based on subnets):

Terraform

resource "aws_lb" "primary_alb" {
  for_each = {for index, subnet in aws_subnet.public : index => subnet}
  # ... rest of your ALB configuration ...
  subnets = [for subnet in values(each.value) : subnet.id]
}
This uses the for expression to convert the aws_subnet.public tuple into a map where the keys are indices and the values are the subnet resources.
The subnets variable in the alb resource, needs to be a list of subnet id's. So the values function is used to get the subnet object, and then a for loop is used to get the id of each subnet.
Using the count.index (If you don't need to iterate based on subnets):

It is very uncommon to have an alb for each subnet. ALBs are usually in multiple subnets for high availability. Therefore, it is most likely that you do not want to use for_each in this scenario.
If you are just wanting to use the public subnets for the alb, you can use the subnets variable, and pass it a list of the subnet IDs.
Terraform

resource "aws_lb" "primary_alb" {
  # ... rest of your ALB configuration ...
  subnets = aws_subnet.public[*].id
}
This will pass a list of all of the public subnet IDs to the alb.



│# Error3: Incorrect attribute value type
│
│   on alb.tf line 9, in resource "aws_lb" "primary_alb":
│    9:   subnets            = [aws_subnet.public[*].id, aws_subnet.database.id]
│     ├────────────────
│     │ aws_subnet.database.id is a string
│     │ aws_subnet.public is tuple with 2 elements
│
│ Inappropriate value for attribute "subnets": element 0: string required.


##sol: Understanding the Problem:

Tuple vs. String:
aws_subnet.public[*].id results in a tuple (list) of string subnet IDs.
aws_subnet.database.id is a single string subnet ID.
Type Mismatch: Terraform's subnets attribute expects a list of strings, not a mix of a tuple and a string.
Solutions:

Combine the Lists Correctly:

Use the concat() function to combine the tuple into a single list.
Terraform

resource "aws_lb" "primary_alb" {
  provider           = aws.primary
  name               = "primary-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.app_sg.id]
  subnets            = concat(aws_subnet.public[*].id, [aws_subnet.database.id])

  tags = {
    Name = "primary-alb"
  }
}
concat() takes multiple lists as arguments and returns a single combined list.
[aws_subnet.database.id] converts the single string into a list containing one element.

╷
│ # Error4: creating RDS DB Instance (terraform-20250323134902666300000001): operation error RDS: CreateDBInstance, 
https response error StatusCode: 400, RequestID: 1c1f5d6f-4baf-4198-a98f-664eedaeee5f, api error InvalidParameterValue: DBName must begin with a letter and contain only alphanumeric characters.
│
│   with aws_db_instance.my_app_db,
│   on rds.tf line 2, in resource "aws_db_instance" "my_app_db":
│    2: resource "aws_db_instance" "my_app_db" {
│
╵##sol: The name "WebApp-db" was invalid here, as rds naming conventions supports only alphanumeric (a-z, lowercase)

###errors which needs to be resolved next time:

│ Error: file provisioner error
│
│   with aws_instance.app_vm_sr,
│   on ec2.tf line 75, in resource "aws_instance" "app_vm_sr":
│   75:   provisioner "file" {
│
│ Missing connection configuration for provisioner.
╵
╷
│ Error: creating EC2 NAT Gateway: operation error EC2: CreateNatGateway, https response error StatusCode: 400, RequestID: b4a856cb-ac27-48fa-b3b6-6157bb4fc1ee, api error InvalidSubnet: The subnet ID 'subnet-072bd104d94de229b' does not exist
│
│   with aws_nat_gateway.dev_natgw_sr,
│   on nat-gw.tf line 33, in resource "aws_nat_gateway" "dev_natgw_sr":
│   33: resource "aws_nat_gateway" "dev_natgw_sr" {
│
╵
╷
│ Error: creating RDS DB Instance (terraform-20250323175057451000000002): operation error RDS: CreateDBInstance, 
https response error StatusCode: 400, RequestID: 766064fa-bd20-4cdf-b8d3-e8e5df282c50, api error InvalidParameterValue: The parameter MasterUserPassword is not a valid password. Only printable ASCII characters besides '/', '@', '"', ' ' may be used.
│
│   with aws_db_instance.my_app_db,
│   on rds.tf line 2, in resource "aws_db_instance" "my_app_db":
│    2: resource "aws_db_instance" "my_app_db" {
│
╵
╷
│ Error: creating RDS DB Subnet Group (pr-db-subnet): operation error RDS: CreateDBSubnetGroup, https response error StatusCode: 400, RequestID: 801ef205-0016-4dce-a576-71d24a2472e2, DBSubnetGroupDoesNotCoverEnoughAZs: The DB 
subnet group doesn't meet Availability Zone (AZ) coverage requirement. Current AZ coverage: us-east-1c. Add subnets to cover at least 2 AZs.
│
│   with aws_db_subnet_group.database_subnet_group,
│   on rds.tf line 17, in resource "aws_db_subnet_group" "database_subnet_group":
│   17: resource "aws_db_subnet_group" "database_subnet_group" {
│
╵
╷
│ Error: creating RDS DB Instance (terraform-20250323175057451000000003): operation error RDS: CreateDBInstance, 
https response error StatusCode: 400, RequestID: 8fba77f0-123d-4c97-8013-7c3e0d2528a6, api error InvalidParameterValue: DBName must begin with a letter and contain only alphanumeric characters.
│
│   with aws_db_instance.my_app_srdb,
│   on rds.tf line 28, in resource "aws_db_instance" "my_app_srdb":
│   28: resource "aws_db_instance" "my_app_srdb" {
│
╵
╷
│ Error: creating RDS DB Subnet Group (sr-db-subnet): operation error RDS: CreateDBSubnetGroup, https response error StatusCode: 400, RequestID: 113aeff5-21b0-4e19-841d-8a0f7402f786, api error InvalidParameterValue: Some input subnets in :[subnet-0859dbd3f4744bf6d] are invalid.
│
│   with aws_db_subnet_group.db_subnet_group,
│   on rds.tf line 43, in resource "aws_db_subnet_group" "db_subnet_group":
│   43: resource "aws_db_subnet_group" "db_subnet_group" {
│
╵
╷
│ Error: creating Security Group (terraform-20250323175059293700000001): operation error EC2: CreateSecurityGroup, https response error StatusCode: 400, RequestID: e9506432-05ee-4c64-80a5-cc2197c458b7, api error InvalidVpcID.NotFound: The vpc ID 'vpc-02c90d36d68195329' does not exist
│
│   with aws_security_group.db_sg_sr,
│   on security-group.tf line 134, in resource "aws_security_group" "db_sg_sr":
│  134: resource "aws_security_group" "db_sg_sr" {
│
╵
╷
│ Error: waiting for EC2 VPC Peering Connection (pcx-0c79e80db03a6b08e) create: unexpected state 'failed', wanted target 'active, pending-acceptance'. last error: Failed due to incorrect VPC-ID, Account ID, or overlapping CIDR range
│
│   with aws_vpc_peering_connection.peer,
│   on vpc-peering.tf line 1, in resource "aws_vpc_peering_connection" "peer":
│    1: resource "aws_vpc_peering_connection" "peer" {
│